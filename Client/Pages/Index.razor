@using JsonlCompare.Client.Components
@using Microsoft.Extensions.Logging
@using Newtonsoft.Json.Linq
@using JsonlCompare.Client.Actions.Json

@inject IJSRuntime runtime

@inject ISnackbar snackbar

@inject ILogger<Index> logger

@inject IDispatcher dispatcher

@page "/"

<link href="css/Index.css" rel="stylesheet">
<div>
    <MudPaper Elevation="5" Rounded="true" Class="info-container">
        <div>
            <div class="dropzone" @ref="dropZoneElement">
                <h1>Jsonl Compare</h1>
                <p>This web app allows comparing json data in a .jsonl file. Upload a file here by dragging and dropping it here.
                    The json data is packed in a table. Differing properties are merged. The side bar allows deselecting properties
                    that shall not be shown in the table. Open it by clicking on the hamburger button.
                    Select a json to show its content on the right side as formatted json.</p>
                <p>The code is available on <a href="https://github.com/Ben757/JsonlCompare">GitHub</a>.
                    If you like the project, feel free to leave a star.</p>
            </div>
        </div>
    </MudPaper>
</div>
<div class="property-table margin-top-10px">
    <JsonlTableComponent/>
</div>
<div class="stick-to-right">
    <JsonViewComponent/>
</div>

@code {
    private ElementReference dropZoneElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await runtime.InvokeAsync<IJSObjectReference>("import", new object?[] { "./dropzone.js" });

            var selfReference = DotNetObjectReference.Create(this);
            
            await module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, selfReference);
        }
    }

    [JSInvokable]
    public Task AddFile(string content)
    {
        var errorCount = 0;
        var newJsons = new List<JObject>(); 
        
        foreach (var json in content.Split("\n"))
        {
            try
            {
                newJsons.Add(JObject.Parse(json));
            }
            catch (Exception e)
            {
                errorCount++;
                logger.LogInformation(e, "Could not parse json {Json}", json);
            }
        }

        if (errorCount > 0)
            snackbar.Add($"Error while parsing {errorCount} JSON(s). Those are skipped.", Severity.Error, options => options.ShowTransitionDuration = 500);
        
        dispatcher.Dispatch(new JsonUpdateAction(newJsons));
        
        return Task.CompletedTask;
    }
}