@using JsonlCompare.Client.Interfaces
@using System.Reactive.Linq
@using System.Reactive.Disposables
@using JsonlCompare.Client.Extensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@implements IDisposable

@inject IJsonSelector jsonSelector
@inject IJsonContentChangeService jsonContentChangeService

<MatPaper Elevation="5" Rounded="true" Class="json-view">
    @JsonViewContent
</MatPaper>

@code {

    private readonly CompositeDisposable disposables = new();
    private MarkupString JsonViewContent { get; set; } = (MarkupString) string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var jsonSelectionSubscription = jsonSelector.JsonObservable
            .Select(JsonToString)
            .Do(json => JsonViewContent = json)
            .Do(_ => StateHasChanged())
            .Subscribe();

        var jsonContentSubscription = jsonContentChangeService.JsonContentChangeNotification
            .Do(_ => StateHasChanged())
            .Subscribe();
        
        disposables.Add(jsonSelectionSubscription);
        disposables.Add(jsonContentSubscription);
    }

    private static MarkupString JsonToString(JObject? json)
    {
        return json?.ToString(Formatting.Indented).ToHtmlString() ?? (MarkupString) string.Empty;
    }

    public void Dispose()
    {
        disposables.Dispose();
    }

}