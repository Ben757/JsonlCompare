@using System.Reactive.Disposables
@using JsonlCompare.Client.Extensions
@using JsonlCompare.Client.Selectors
@using JsonlCompare.Client.Store.SelectedJson
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@implements IDisposable

@inject IState<SelectedJsonState> selectedJsonState

<MatPaper Elevation="5" Rounded="true" Class="json-view">
    @jsonMarkupSelector.Select(selectedJsonState)
</MatPaper>

@code {
    private readonly Selector<SelectedJsonState, MarkupString> jsonMarkupSelector = SelectorFactory
        .CreateSelector<SelectedJsonState, MarkupString>("jsonMarkup",
            (state) => JsonToString(state.SelectedJson));

    protected override void OnInitialized()
    {
        base.OnInitialized();
        selectedJsonState.StateChanged += StateHasChangedEventHandler;
    }

    private void StateHasChangedEventHandler(object? sender, SelectedJsonState e)
    {
        StateHasChanged();
    }

    private static MarkupString JsonToString(JObject? json)
    {
        return json?.ToString(Formatting.Indented).ToHtmlString() ?? (MarkupString) string.Empty;
    }

    public void Dispose()
    {
        selectedJsonState.StateChanged -= StateHasChangedEventHandler;
    }

}