@using JsonlCompare.Client.Models
@using System.Reactive.Disposables
@using JsonlCompare.Client.Actions.SelectedJson
@using JsonlCompare.Client.Extensions
@using JsonlCompare.Client.Selectors
@using JsonlCompare.Client.Services
@using JsonlCompare.Client.Store.Json
@using JsonlCompare.Client.Store.JsonProperty
@using Newtonsoft.Json.Linq

@implements IDisposable

@inject IState<JsonState> jsonState
@inject IState<JsonPropertyState> jsonPropertyState

@inject IDispatcher dispatcher

<MudTable Items="@jsonState.Value.Jsons" FixedHeader="true" class="mat-elevation-z5"
          Striped="true" Hover="true" OnRowClick="OnSelectionChanged" T="JObject">
    <HeaderContent>
        @foreach (var property in PropertyInfos())
        {
            if (property.Show && !property.HasChildren)
            {
                <MudTh>@property.Path</MudTh>
            }
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (var property in PropertyInfos())
        {
            if (property.Show && !property.HasChildren)
            {
                <MudTd>@context.SelectToken(property.Path)?.ToString()</MudTd>
            }
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.End"></MudTablePager>
    </PagerContent>
</MudTable>

@code
{

    private IEnumerable<JsonPropertyInfo> PropertyInfos()
    {
        return jsonPropertyState.Value.PropertyInfos
            .SelectMany(x => x.EnumerateChildren());
    }

    protected override void OnInitialized()
    {
        jsonState.StateChanged += StateChangedEventHandler;
        jsonPropertyState.StateChanged += PropertyStateChangedEventHandler;
    }

    private void PropertyStateChangedEventHandler(object? sender, JsonPropertyState state)
    {
        StateHasChanged();
    }

    private void StateChangedEventHandler(object? sender, JsonState state)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        jsonState.StateChanged -= StateChangedEventHandler;
        jsonPropertyState.StateChanged -= PropertyStateChangedEventHandler;
    }

    private void OnSelectionChanged(TableRowClickEventArgs<JObject> tableRowClickEventArgs)
    {
        dispatcher.Dispatch(new SelectedJsonSetAction(tableRowClickEventArgs.Item));
    }
}
