@using JsonlCompare.Client.Models
@using JsonlCompare.Client.Interfaces
@using System.Reactive.Disposables
@using JsonlCompare.Client.Actions.JsonProperty

@inject IDispatcher dispatcher

@if (!JsonProperty.HasChildren)
{
    <MatNavItem>
        <div class="vbox">
            <MatCheckbox @bind-Value="@ShowProperty"></MatCheckbox>
            <span class="nav-item-label">@JsonProperty.Name</span>
        </div>
    </MatNavItem>
}
else
{
    <MatNavSubMenu>
        <MatNavSubMenuHeader>
            <MatNavItem AllowSelection="false">
                <div class="vbox">
                    <MatCheckbox @bind-Value="@dummyValue" Disabled="true" Indeterminate="true"></MatCheckbox>
                    <span class="nav-item-label">@JsonProperty.Name</span>
                </div>
            </MatNavItem>
        </MatNavSubMenuHeader>
        <MatNavSubMenuList>
            @foreach (var child in JsonProperty.Children)
            {
                <PropertySelectionComponent JsonProperty="@child"></PropertySelectionComponent>
            }
        </MatNavSubMenuList>
    </MatNavSubMenu>
}

@code 
{
    [Parameter]
    public JsonPropertyInfo JsonProperty { get; set; } = new();

    private bool? dummyValue = null; //some value has to be bound to make MatCheckbox work

    public bool ShowProperty
    {
        get => JsonProperty.Show;
        set
        {
            JsonProperty.Show = value;
            dispatcher.Dispatch(new JsonPropertyUpdateShowAction(JsonProperty));
        }
    }
}