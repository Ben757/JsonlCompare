@using JsonlCompare.Client.Extensions
@using JsonlCompare.Client.Models
@using JsonlCompare.Client.Store.JsonProperty
@using JsonlCompare.Client.Actions.JsonProperty
@implements IDisposable

@inject IState<JsonPropertyState> jsonPropertyState
@inject IDispatcher dispatcher

<MudTreeView T="JsonPropertyInfo" MultiSelection="true" Items="@jsonPropertyState.Value.PropertyInfos"
             SelectedValuesChanged="SelectedValuesChanged">
    <ItemTemplate>
        <MudTreeViewItem Items="@context.Children" Value="@context" Text="@context.Name" @bind-Selected="@context.Show"/>
    </ItemTemplate>
</MudTreeView>

@code {

    private HashSet<JsonPropertyInfo> selectedValues = new();

    private void StateChangedEventHandler(object? sender, JsonPropertyState state)
    {
        selectedValues = jsonPropertyState.Value.PropertyInfos.Flatten(x => x.Children).ToHashSet();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        selectedValues = jsonPropertyState.Value.PropertyInfos;
        jsonPropertyState.StateChanged += StateChangedEventHandler;
    }

    public void Dispose()
    {
        jsonPropertyState.StateChanged -= StateChangedEventHandler;
    }

    private void SelectedValuesChanged(HashSet<JsonPropertyInfo> newSelectedValues)
    {
        var hideProperties = selectedValues
            .Where(x => !newSelectedValues.Contains(x));

        var showProperties = newSelectedValues
            .Where(x => !selectedValues.Contains(x));

        var changedProperties = showProperties.Concat(hideProperties).ToList();

        changedProperties.ForEach(x => dispatcher.Dispatch(new JsonPropertyUpdateShowAction(x)));

        selectedValues = newSelectedValues;
    }

}