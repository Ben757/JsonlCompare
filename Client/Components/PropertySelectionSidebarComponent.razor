@using System.Reactive.Disposables
@using System.Reflection
@using JsonlCompare.Client.Models
@using JsonlCompare.Client.Selectors
@using JsonlCompare.Client.Services
@using JsonlCompare.Client.Store.Json
@using JsonlCompare.Client.Store.JsonProperty

@implements IDisposable

@inject IState<JsonPropertyState> jsonPropertyState

@foreach (var property in jsonPropertyState.Value.PropertyInfos)
{
    <PropertySelectionComponent JsonProperty="@property"></PropertySelectionComponent>
}

@code {

    private void StateChangedEventHandler(object? sender, JsonPropertyState state)
    {
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        jsonPropertyState.StateChanged += StateChangedEventHandler;
    }

    public void Dispose()
    {
        jsonPropertyState.StateChanged -= StateChangedEventHandler;
    }
}